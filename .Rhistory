rm(list = ls())
library(sdmpredictors)
library(rgbif)
library(maps)
# library(leaflet)
library(sdm)
maps::map(ylim = c(60, 70), xlim = c(30, 50))
xs <- c(32, 45)
ys <- c(63.5, 67)
abline(v = xs, lty  = 1)
abline(h = ys, lty  = 1)
#reading in occurences
CL <- occ_search(scientificName = 'Clione limacina', decimalLatitude = paste(ys, collapse = ','), decimalLongitude = paste(xs, collapse = ','))
LH <- occ_search(scientificName = 'Limacina helicina', decimalLatitude = paste(ys, collapse = ','), decimalLongitude = paste(xs, collapse = ','))
#View(CL$data)
# plotting occurences
maps::map(ylim = c(60, 70), xlim = c(30, 50), fill = T, col = 'grey')
points(x = CL$data$decimalLongitude,
CL$data$decimalLatitude, pch = '.', col = 'red')
points(x = LH$data$decimalLongitude,
LH$data$decimalLatitude, pch = '.', col = 'blue')
#predictors
# first to select layers
lays <- list_layers(datasets=c(), marine = T)
lays <- lays[which(lays$dataset_code != 'Freshwater'),]
View(lays)
#outputing
# write.table(x = lays, file = '/home/mikhail/Documents/white_sea_sdm/predictors_seas.csv', quote = F, sep = '\t')
lays$layer_code
table(lays$dataset_code)
marspec_layers <- lays[which(lays$dataset_code == 'MARSPEC'),]
# x <- load_layers(c("BO2_tempmin_ss", "BO_salinity", "BO_bathymax", "MS_biogeo06_bathy_slope_5m"), datadir = tempdir())
# e <- extent(xs, ys)
# whiteSea <- crop(x, e)
# plot(whiteSea)
diap <- seq_along(marspec_layers$layer_code)# [1:10]
x <- load_layers(marspec_layers$layer_code[diap], datadir = tempdir())
x <- load_layers(marspec_layers$layer_code[diap], datadir = tempdir())
e <- extent(xs, ys)
whiteSea <- crop(x, e)
names(whiteSea) <- marspec_layers$name[diap]
plot(whiteSea)
plot(whiteSea)
# sdm package time
class(whiteSea)
# the object is not alike sdm vignette
whiteSea <- stack(whiteSea)
# now it is
plot(whiteSea)
#next occurence
# they are to be of "SpatialPointsDataFrame" class
# View(CL$data$decimalLatitude)
##### 1 Clione limacina
# Generate 100 random points for no-presence data
set.seed(90)
bg_spdf_WS <- sampleRandom(whiteSea, size = 350, sp = T)
#coords are to be extracted
CL_df <- data.frame(decimalLatitude = CL$data$decimalLatitude,
decimalLongitude = CL$data$decimalLongitude)
#and crs came from ppredictor object whiteSea
CL_spdf <- SpatialPointsDataFrame(coords = CL_df,
data = CL_df,
proj4string = whiteSea@crs)
# Combine presence/no-presence data
CL_and_bg <- SpatialPointsDataFrame(coords = rbind(bg_spdf_WS@coords, CL_spdf@coords),
data = data.frame(Occurence = c(rep(0, nrow(bg_spdf_WS)), rep(1, nrow(CL_spdf)))),
proj4string = whiteSea@crs)
dim(CL_and_bg)
dim(CL_spdf)
dim(bg_spdf_WS)
# PART ML
d_CL <- sdmData(formula = Occurence ~ ., train = CL_and_bg, predictors= whiteSea)
set.seed(90)
m1_CL <-sdm(Occurence ~ ., data = d_CL, methods = 'rf', replication='sub',  test.percent = 30, n = 10)
#model diagnostics
roc(m1_CL)
m1_CL
##### 2 Limacina helicina
#coords are to be extracted
LH_df <- data.frame(decimalLatitude = LH$data$decimalLatitude,
decimalLongitude = LH$data$decimalLongitude)
# Combine presence/no-presence data
LH_and_bg <- SpatialPointsDataFrame(coords = rbind(bg_spdf_WS@coords, LH_spdf@coords),
data = data.frame(Occurence = c(rep(0, nrow(bg_spdf_WS)), rep(1, nrow(LH_spdf)))),
proj4string = whiteSea@crs)
LH_spdf <- SpatialPointsDataFrame(coords = LH_df,
data = LH_df,
proj4string = whiteSea@crs)
# Combine presence/no-presence data
LH_and_bg <- SpatialPointsDataFrame(coords = rbind(bg_spdf_WS@coords, LH_spdf@coords),
data = data.frame(Occurence = c(rep(0, nrow(bg_spdf_WS)), rep(1, nrow(LH_spdf)))),
proj4string = whiteSea@crs)
LH$data -> my_data
#spdf
LH_spdf <- sp::SpatialPointsDataFrame(coords = my_data %>% dplyr::select(decimalLongitude, decimalLatitude),
proj4string = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"),
data = my_data %>% dplyr::select(-c(decimalLatitude, decimalLongitude)))
plot(LH_spdf)
# next as it goes in sdm vignette
# Generate 100 random points for no-presence data
set.seed(90)
bg_spdf_WS <- sampleRandom(whiteSea, size = 350, sp = T)
# PART ML
d_LH <- sdmData(formula = Occurence ~ ., train = LH_and_bg, predictors= whiteSea)
